# mailer class for sending composed emails from customer to customer's customers
class CustomerMailer < ApplicationMailer
  # before_action :get_default_options
  after_action :set_delivery_options

  default from: 'go@wundercoach.net'
  layout 'mailer'
  # custom mail, generated by merging mailtemplate/mailskin and substituting placeholders
  # this is frequently used by derived mailers, e.g. Invoice and Eventmailer
  # options must at least contain {to: 'some_recipient@something.com'}
  # Required mailer: wundercoach standard mailer OR custom if is setup
  def send_composed_mail(account, eventbooking, mailtemplate, options = {})
    @options = options
    @smtpserver = account.get_smtp_server

    #CustomerMailer.delivery_method.settings.merge!(@smtpserver.get_delivery_options)
    CustomerMailer.default_options =
              {
                delivery_method: :smtp,
                reply_to: (@smtpserver.replyto_address.blank? ? @smtpserver.from_address : @smtpserver.replyto_address),
                from: "#{@smtpserver.from_name} <#{@smtpserver.from_address}>"
              }
    mail(@options.merge(mailtemplate.mailer_options(eventbooking))) do |format|
      format.html do
        # produce merged html email here
        render inline: mailtemplate.render_mailskin(eventbooking)
      end
      # format.text { render text: 'Render text' }
    end
  end

  private

    def set_delivery_options
      # merge the settings for active smtpserver
      mail.delivery_method.settings.merge!(@smtpserver.get_delivery_options)

    end
end
